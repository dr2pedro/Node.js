version: '3.8'

volumes:
  mongo_data:
    name: mongo_data
  backup_mongo:
    name: backup_data

networks: 
  databases:
  view:

services: 

  gateway:
    build: 
      context: ./
      args:
      - src=gateway
    image: gateway:latest
    ports:
      - ${PORT_GATEWAY}:${PORT_GATEWAY}
    command: npm run start
    networks: 
      - databases
      - view
    healthcheck:
      test: curl -fs "http://localhost:${PORT_GATEWAY}/signup" || exit 1  
    deploy:
      replicas: 1
  
  signin:
    build: 
      context: ./
      args:
      - src=signin
    image: signin:latest
    ports:
      - ${PORT_SIGNIN}
    command: npm run start
    networks: 
      - databases
    healthcheck:
      test: curl -fs "http://localhost:${PORT_SIGNIN}/" || exit 1
    deploy:
      replicas: 1

  signup:
    build: 
      context: ./
      args:
      - src=signup
    image: signup:latest
    ports:
    - ${PORT_SIGNUP}
    command: npm run start
    networks: 
      - databases
    healthcheck:
      test: curl -fs "http://localhost:${PORT_SIGNUP}/" || exit 1
    deploy:
      replicas: 1
  
  forgotpassword:
    build: 
      context: ./
      args:
      - src=forgotpassword
    image: forgotpassword:latest
    ports:
    - ${PORT_FORGOTPASSWORD}
    command: npm run start
    networks: 
      - databases
    healthcheck:
      test: curl -fs "http://localhost:${PORT_FORGOTPASSWORD}/" || exit 1
    deploy:
      replicas: 1    

  db:
    image: mongo
    ports:
      - "27017"
    volumes:
      - mongo_data:/data/db
      - backup_mongo:/data/backup
    networks: 
      - databases
    healthcheck:
      test: sh -c 'mongodump -d authentication --out /data/backup' || exit 1
    deploy:
      replicas: 1

  db_copy:
    image: mongo
    ports:
      - "27017"
    volumes:
      - backup_mongo:/data/backup
    healthcheck:
      test: sh -c 'mongorestore --drop /data/backup' || exit 1
    networks: 
      - databases
    deploy:
      replicas: 2